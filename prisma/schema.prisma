// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/prisma/@generated/graphql"
}

//generator nestgraphql {
//  provider = "nestjs-prisma-graphql-crud-gen"
//  output = "../src/prisma/@generated/crud"
//}

enum ChainName {
  Eth
  Bsc
  Polygon
  Avax
  Flow
  Near
  Polkadot
  Solana
}

// NOTE: Must be in sync with all 3 services
model Chain {
  name       ChainName @id @map("_id")
  chain_id   Int
  rpc_urls   String?     // rpc_url array in json string
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@map("chains")
}

model Pair {
  // id = (base quote chain_id broker_id)
  id                    String @id
  on_chain_id           String

  base                  String
  quote                 String
  chain_id              Int
  exchange_id           String

  data                  Json

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("pairs")
}

//
model PairTradingQuote {
  id                    String @id // has 1-1 relationship with Pair, so the same id was used
  price                 String
  current_gas           Float
  slip_page             Float
  min_receive           Float // 1 base = ? minimum quote we can get if trade finish

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("pair_trading_quotes")
}

model PairDynamicData {
  pair_id         String       @id

  // Copy from inside of Pair.data
  initialReserve0 Float?
  initialReserve1 Float?
  initialLiquidity Float?
  initialLiquidityUpdatedAt DateTime?
  liquidity Float?
  reserve0 Float?
  reserve1 Float?
  reserveUpdatedAt DateTime?

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("pair_dynamic_data")
}

model PairRealtimeQuote {
  pair_id         String       @id

  // from pcs
  current_price   Decimal @db.Decimal(24,12)
  price_impact    Decimal @db.Decimal(24,12)

  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  @@map("pair_realtime_quote")
}

model Exchanges {
  id String @id
  name String

  @@map("exchanges")
}

enum TradingIntendStatus {
                  // from top to bottom
  Deleted         // was soft deleted
  Created         // has just created but do not intend to trade
  FindingEntry    // trade started, be going to place an entry
  FindingExit     // be going to tp/sl
  TP              // Finished by tp order
  SL              // Finished by sl order
}
enum TradingIntendType {
  Auto        // Auto trade on new pair
  OnRedList   // Only trade the pair exists on the red list
}
model TradingIntend {
  id                  Int       @id @default(autoincrement())
  pair_id             String
  type                TradingIntendType
  vol                 Decimal? @db.Decimal(24,12)
  entry               Decimal? @db.Decimal(24,12)
  tp                  Decimal? @db.Decimal(24,12)
  sl                  Decimal? @db.Decimal(24,12)
  status              TradingIntendStatus

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([pair_id])
  @@index([status])
  @@map("trading_intends")
}

//
// The current active trading contract app need to focus on
//
model TradingDirectiveRedListContract {
  id                  Int       @id @default(autoincrement())
  contract            String
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt

  @@index([contract])
  @@map("trading_directive_red_list_contracts")
}

model TradingDirectiveAutoConfig {
  id                         Int       @id @default(autoincrement())
  // if tp_target=1.5 then we will tp at current_price = 1.5 * entry_price
  tp_target                  Decimal @db.Decimal(6,2)
  sl_notice_target           Decimal @db.Decimal(6,2)
  sl_target                  Decimal @db.Decimal(6,2)

  // How many USD you wanna spent for a single pair?
  min_pair_budget_usd        Decimal @db.Decimal(8,2)
  max_pair_budget_usd        Decimal @db.Decimal(8,2)

  // how much USD in LP that this pair is safe to trade?
  safe_lp_size_usd           Decimal @db.Decimal(10,2)
  // Eg: trading vol cannot exceed 5% of LP
  max_vol_percent_of_lp      Decimal @db.Decimal(4,1)

  // empty or <= 0 mean auto gas_price
  fixed_gas_price_in_gwei    Int?

  @@map("trading_directive_auto_config")
}

// Save change version of
// model TradingIntendVersions {
//   id                  Int       @id @default(autoincrement())
//   trading_intend_id   Int
//
//   pair_id             String
//   entry               String
//   tp                  String
//   sl                  String
//   status              TradingIntendStatus
// }

enum TradeHistoryStatus {
  D         // Deleted, was soft deleted
  S         // Successed
  F         // Failed
}
model TradeHistory {
  id                Int       @id @default(autoincrement())

  sell              String
  buy               String
  sell_amount       Decimal? @db.Decimal(24,12)
  received_amount   Decimal? @db.Decimal(24,12)
  price             Decimal? @db.Decimal(24,12)
  price_impact_percent      Decimal? @db.Decimal(5,2)

  status            TradeHistoryStatus @default(S)
  duration          Float?
  receipt           Json?

  created_at DateTime   @default(now())
  updated_at DateTime?   @updatedAt

  @@map("trade_histories")
}



model AppConfig {
  key                  String   @id
  value                String

  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt

  @@map("app_configs")
}

model AppCacheInt {
  key                  String   @id
  value                String
  updated_at           DateTime   @updatedAt

  @@map("app_cache_int")
}

model AppCacheString {
  key                  String   @id
  value                String
  updated_at           DateTime   @updatedAt

  @@map("app_cache_string")
}
